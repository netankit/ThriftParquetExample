/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package gen.example;

import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EmployeeService {

	public interface Iface {

		public Employee getEmployee(EmployeeId id)
				throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void getEmployee(
				EmployeeId id,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getEmployee_call> resultHandler)
				throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient
			implements Iface {
		public static class Factory implements
				org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			@Override
			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			@Override
			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot,
				org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		@Override
		public Employee getEmployee(EmployeeId id)
				throws org.apache.thrift.TException {
			send_getEmployee(id);
			return recv_getEmployee();
		}

		public void send_getEmployee(EmployeeId id)
				throws org.apache.thrift.TException {
			getEmployee_args args = new getEmployee_args();
			args.setId(id);
			sendBase("getEmployee", args);
		}

		public Employee recv_getEmployee() throws org.apache.thrift.TException {
			getEmployee_result result = new getEmployee_result();
			receiveBase(result, "getEmployee");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getEmployee failed: unknown result");
		}

	}

	public static class AsyncClient extends
			org.apache.thrift.async.TAsyncClient implements AsyncIface {
		public static class Factory implements
				org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private final org.apache.thrift.async.TAsyncClientManager clientManager;
			private final org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(
					org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			@Override
			public AsyncClient getAsyncClient(
					org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager,
						transport);
			}
		}

		public AsyncClient(
				org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		@Override
		public void getEmployee(
				EmployeeId id,
				org.apache.thrift.async.AsyncMethodCallback<getEmployee_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getEmployee_call method_call = new getEmployee_call(id,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getEmployee_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private final EmployeeId id;

			public getEmployee_call(
					EmployeeId id,
					org.apache.thrift.async.AsyncMethodCallback<getEmployee_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.id = id;
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"getEmployee",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getEmployee_args args = new getEmployee_args();
				args.setId(id);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Employee getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getEmployee();
			}
		}

	}

	public static class Processor<I extends Iface> extends
			org.apache.thrift.TBaseProcessor implements
			org.apache.thrift.TProcessor {
		private static final Logger LOGGER = LoggerFactory
				.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(
					iface,
					getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(
				I iface,
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("getEmployee", new getEmployee());
			return processMap;
		}

		private static class getEmployee<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, getEmployee_args> {
			public getEmployee() {
				super("getEmployee");
			}

			@Override
			public getEmployee_args getEmptyArgsInstance() {
				return new getEmployee_args();
			}

			@Override
			public getEmployee_result getResult(I iface, getEmployee_args args)
					throws org.apache.thrift.TException {
				getEmployee_result result = new getEmployee_result();
				result.success = iface.getEmployee(args.id);
				return result;
			}

			protected boolean isOneway() {
				return false;
			}
		}

	}

	public static class getEmployee_args
			implements
			org.apache.thrift.TBase<getEmployee_args, getEmployee_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getEmployee_args");

		private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"id", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		public EmployeeId id; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			ID((short) 1, "id");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ID
					return ID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ID,
					new org.apache.thrift.meta_data.FieldMetaData("id",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT,
									EmployeeId.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					getEmployee_args.class, metaDataMap);
		}

		public getEmployee_args() {
		}

		public getEmployee_args(EmployeeId id) {
			this();
			this.id = id;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getEmployee_args(getEmployee_args other) {
			if (other.isSetId()) {
				this.id = new EmployeeId(other.id);
			}
		}

		@Override
		public getEmployee_args deepCopy() {
			return new getEmployee_args(this);
		}

		@Override
		public void clear() {
			this.id = null;
		}

		public EmployeeId getId() {
			return this.id;
		}

		public getEmployee_args setId(EmployeeId id) {
			this.id = id;
			return this;
		}

		public void unsetId() {
			this.id = null;
		}

		/**
		 * Returns true if field id is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetId() {
			return this.id != null;
		}

		public void setIdIsSet(boolean value) {
			if (!value) {
				this.id = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case ID:
				if (value == null) {
					unsetId();
				} else {
					setId((EmployeeId) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case ID:
				return getId();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case ID:
				return isSetId();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getEmployee_args)
				return this.equals((getEmployee_args) that);
			return false;
		}

		public boolean equals(getEmployee_args that) {
			if (that == null)
				return false;

			boolean this_present_id = true && this.isSetId();
			boolean that_present_id = true && that.isSetId();
			if (this_present_id || that_present_id) {
				if (!(this_present_id && that_present_id))
					return false;
				if (!this.id.equals(that.id))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(getEmployee_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			getEmployee_args typedOther = other;

			lastComparison = Boolean.valueOf(isSetId()).compareTo(
					typedOther.isSetId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.id, typedOther.id);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField field;
			iprot.readStructBegin();
			while (true) {
				field = iprot.readFieldBegin();
				if (field.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (field.id) {
				case 1: // ID
					if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
						this.id = new EmployeeId();
						this.id.read(iprot);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								field.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
							field.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			validate();
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (this.id != null) {
				oprot.writeFieldBegin(ID_FIELD_DESC);
				this.id.write(oprot);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getEmployee_args(");
			boolean first = true;

			sb.append("id:");
			if (this.id == null) {
				sb.append("null");
			} else {
				sb.append(this.id);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

	}

	public static class getEmployee_result
			implements
			org.apache.thrift.TBase<getEmployee_result, getEmployee_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getEmployee_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		public Employee success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT,
									Employee.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					getEmployee_result.class, metaDataMap);
		}

		public getEmployee_result() {
		}

		public getEmployee_result(Employee success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getEmployee_result(getEmployee_result other) {
			if (other.isSetSuccess()) {
				this.success = new Employee(other.success);
			}
		}

		@Override
		public getEmployee_result deepCopy() {
			return new getEmployee_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public Employee getSuccess() {
			return this.success;
		}

		public getEmployee_result setSuccess(Employee success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Employee) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getEmployee_result)
				return this.equals((getEmployee_result) that);
			return false;
		}

		public boolean equals(getEmployee_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(getEmployee_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			getEmployee_result typedOther = other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField field;
			iprot.readStructBegin();
			while (true) {
				field = iprot.readFieldBegin();
				if (field.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (field.id) {
				case 0: // SUCCESS
					if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
						this.success = new Employee();
						this.success.read(iprot);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								field.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
							field.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			validate();
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			oprot.writeStructBegin(STRUCT_DESC);

			if (this.isSetSuccess()) {
				oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
				this.success.write(oprot);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getEmployee_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

	}

}
